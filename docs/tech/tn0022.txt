Making a New wxWidgets Release
==============================

Creating a new release requires a few things before getting started:

* Linux or OSX.
* Windows 7+ with HTML Help Workshop, and Inno Setup installed.
* 7-Zip, Doxygen 1.8.8, and GraphViz installed on both machines.
* Bakefile 0.2.12 installed on the linux machine.

Unless mentioned otherwise, all steps should be run on Linux or OSX so that the
repository export used for the release is primarily using LF line endings. Files
that require CRLF line endings will be converted appropriately.

*Important:* Ensure that 7-Zip, HTML Help Workshop, Doxygen, GraphViz and Inno
Setup have all been added to your Path in Windows. You can confirm this by
running `7z`, `hhc`, `iscc`, `doxygen -v`, and `dot -V` in a command prompt.
Add the missing installed folder locations of any executables to your Path.

Checking ABI Compatibility
--------------------------

For the stable (even) releases only, check that binary compatibility hasn't
been broken since the last stable release. 


Instructions:
  Under Unix systems use the abi-compliance-checker tool:
    - Get the tool ( https://lvc.github.io/abi-compliance-checker/ ).
    - Build the old (vX.Y.Z-1) library with -g -Og options, i.e. configure
      it  with --enable-debug and CXXFLAGS=-Og CFLAFS=-Og. For convenience,
      let's assume it's built in "$old" subdirectory.
    - Build the new (vX.Y.Z) library with the same options in "$new".
    - Create directories for temporary files containing the ABI dumps for
      the old and new libraries: mkdir -p ../compat/{$old,$new}.
    - Run abi-dumper on all libraries: for l in $old/lib/*.so; do abi-dumper
      $l -lver $old -o ../compat/$old/$(basename $l).dump; done and the same
      thing with the new libraries.
    - Run abi-compliance-checker on each pair of produced dumps to generate
      HTML reports: for l in $old/*dump; do abi-compliance-checker 
      -l $(basename $l .dump) -old $l -new $new/$(basename $l); done.
    - Examine these reports, paying attention to the problem summary.

  Under MSW systems:
    Manually check compatibility by building the widgets samples from the
    old tree and then run it using the new DLLs.

Pre-Release Steps
-----------------

* The Post-Release step of the previous release will have updated the
  micro version of this release.
* Confirm the version in `include/wx/version.h`.
* Update `docs/readme.txt`. Please review its contents in addition to just
  changing the version number. Be sure to correct the date in the last line.
* Put a date on the release line in `docs/changes.txt`.
* Update the date in the manual (`docs/doxygen/mainpages/manual.h`).
* Update the release announcement post in `docs/publicity/announce.txt`.
* For micro releases, review the changelog to determine if any ABI changes
  have been made. If so, or if this is a major or minor release, update the
  C:R:A settings in build/tools/version.bkl. Then from the build/bakesfiles
  directory run
    bakefile_gen
  and from the root directory run
    autoconf -B build/autoconf_prepend-include
* Commit the changes and tag the release using your GPG key:
    git tag -s -m 'Tag X.Y.Z release' vX.Y.Z
  Don't overwrite existing tags. For non-final releases use e.g. X.Y.Z-rc1
  instead of X.Y.Z.


Creating Release Files
----------------------

The release scripts can be run from any working directory, and they will
generate all release package files under `distrib/release/x.y.z`. The scripts
build the release packages based on the current HEAD commit, so always
ensure you have the appropriate tag or commit checked out.

1. Run `./build/tools/release.sh x.y.z` to create source archives
   `wxWidgets-x.y.z.{7z,tar.bz2,zip}`, `wxWidgets-x.y.z-headers.7z`, and
   `wxWidgets-x.y.z-docs-html.{tar.bz2,zip}` packages.

2. Copy just the `wxWidgets-x.y.z.zip` package into the same
   `distrib\release\x.y.z` folder on Windows.

3. Run `build/tools/release.bat x.y.z` in a Windows command prompt.

4. Create a zip file from the CHM one:
     zip wxWidgets-x.y.z-docs-chm.zip wxWidgets-x.y.z.chm
     
5. Copy these Windows packages back to your Linux or OSX `distrib/release/x.y.z`
   directory so you can continue with the upload step with all packages
   available:

   ```
   wxMSW-x.y.z-Setup.exe
   wxWidgets-x.y.z-docs-chm.zip
   ```

Uploading
---------

Create a new release on GitHub using vX.Y.Z tag and title.
Use the content of docs/release.md for the release description box.

Attach the following files to it using the web interface:

    wxMSW-Setup-x.y.z.exe
    wxWidgets-x.y.z.7z
    wxWidgets-x.y.z.tar.bz2
    wxWidgets-x.y.z.zip
    wxWidgets-docs-chm-x.y.z.zip
    wxWidgets-docs-html-x.y.z.tar.bz2
    wxWidgets-docs-html-x.y.z.zip
    wxWidgets-x.y.z-headers.7z
    
Next, update the SHA-1 sums and check the version in the GitHub release
description box.

Contact the individuals who will create the MSW binaries and advise them
of the GitHub link to download/upload binaries from/to. They will update
the SHA-1 sums and advise you when they have finished.

Update Documentation
--------------------

This requires being able to ssh to docs.wxwidgets.org, please ask Bryan if
you think you should be able to do it, but can't.

Once logged in, run ~/update-trunk-docs.sh script to update files in
public_html/trunk directory, copy its contents to public_html/x.y.z,
switch any links, such as 3.1 to point to x.y.z by doing

$ cd ~/public_html
$ ln -sfn 3.y.z 3.y

and edit ~/public_html/index.md to add the link to the new release to it.

If the docs must be generated from the tag itself, and not from master,
note that you need to apply the special commit which is always the tip 
of master branch in ~/wxWidgets git repository on this machine.

E.g. to create documentation for v3.0.z release:

$ cd ~/wxWidgets
$ git fetch --tags
$ git checkout -b my-tmp-branch v3.0.z
$ git cherry-pick master
$ vi docs/doxygen/Doxyfile
... edit HTML_OUTPUT to create files in ~/public_html/3.0.z
$ cd docs/doxygen
$ PATH="$HOME/doxygen/bin:$PATH" WX_SKIP_DOXYGEN_VERSION_CHECK=1 nice -n 15 ./regen.sh php

# Cleanup
$ git reset --hard master
$ git checkout master
$ git branch -d my-tmp-branch


Announcement
------------

Update https://www.wxwidgets.org:
* Update release information (at least version and released) 
  in _data/relases.yml.
* Update the list of compilers used for making MSW binaries
  in downloads/index.md if necessary (note that there is no need to update
  anything else, the page will dynamically show the release files with the
  specified prefixes).
* Add a news item. Usually a news item is enough but something more can be
  called for for major releases.
* Push the changes (or create the PR with them) to GitHub. Note that this 
  will trigger the site rebuild which will fail if the release statistics 
  are not available yet, so make sure to publish the release on GitHub first
  (or wait an hour for the next scheduled site rebuild to happen).

Post `docs/publicity/announce.txt` at least to wx-announce@googlegroups.com and
to wx-users.

Submit a link to https://www.reddit.com/r/programming

Submit to https://isocpp.org/blog/suggest

For major releases, submit the announcement to https://slashdot.org/submission


Post-Releas Steps
-----------------

Trac: 
* Mark the milestone corresponding to the release as completed and add a
  new version for it to allow reporting bugs against it and create the next
  milestone (ask Vadim or Robin to do it or to get admin password).
* Update the roadmap at https://trac.wxwidgets.org/wiki/Roadmap to at least
  mention the new release there.
* Increase the version for the next release at
  https://trac.wxwidgets.org/wiki/Queries in
  "Tickets to be fixed for the next release".

Run misc/scripts/inc_release to increment micro version, i.e. replace x.y.z
with x.y.z+1.

Update the C:R:A settings in build/tools/version.bkl to C:R+1:A. Then from
the build/bakesfiles directory run

  bakefile_gen

and from the root directory run

  autoconf -B build/autoconf_prepend-include

